name: Linux Intel
# triggered events (push, pull_request) for the develop branch
on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]
  workflow_dispatch:

defaults:
  run:
    shell: bash -leo pipefail {0}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# This workflow contains multiple jobs for different operating systems
jobs:

  ubuntu_build:
    name: Ubuntu Intel Build
    # Run on ubuntu-latest
    runs-on: ${{ matrix.os }}

    env:
      CC: icc
      FC: ifort
      CXX: icpc
    strategy:
      matrix:
        os: [ubuntu-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      # Update
      - name: Update
        run: sudo apt-get update

      # Install Intel
      - name: Install Intel compilers
        run: |
          cd /tmp
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
          sudo apt-get install intel-oneapi-dev-utilities intel-oneapi-mpi-devel intel-oneapi-openmp intel-oneapi-compiler-fortran intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
          echo "source /opt/intel/oneapi/setvars.sh" >> ~/.bash_profile

      # Cache NetCDF
      - name: cache-netcdf
        id: cache-netcdf
        uses: actions/cache@v2
        with:
          path: ~/netcdf
          key: netcdf-c-4.7.4-${{ runner.os }}-intel

      # Build HDF5
      - name: build-hdf5
        if: steps.cache-netcdf.outputs.cache-hit != 'true'
        run: |
          export CC=mpiicc
          wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.7/src/hdf5-1.10.7.tar.gz &> /dev/null
          tar -xzf hdf5-1.10.7.tar.gz
          pushd hdf5-1.10.7
          ./configure --prefix=${HOME}/netcdf --enable-parallel --disable-tools --disable-fortran --disable-cxx --enable-parallel-tests
          make -j2
          make install
        
      # Build NetCDF-C   
      - name: build-netcdf-c
        if: steps.cache-netcdf.outputs.cache-hit != 'true'
        run: |
          export CC=mpiicc
          export CPPFLAGS=-I${HOME}/netcdf/include
          export LDFLAGS=-L${HOME}/netcdf/lib
          wget https://www.unidata.ucar.edu/downloads/netcdf/ftp/netcdf-c-4.7.4.tar.gz &> /dev/null
          tar -xzf netcdf-c-4.7.4.tar.gz
          pushd netcdf-c-4.7.4
          ./configure --prefix=${HOME}/netcdf --disable-dap --disable-utilities
          make -j2
          make install

      # Build NetCDF-Fortran
      - name: build-netcdf-fortran
        if: steps.cache-netcdf.outputs.cache-hit != 'true'
        run: |
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${HOME}/netcdf/lib"
          export PATH="${HOME}/netcdf/bin:$PATH"
          export CC=mpiicc
          export FC=mpiifort
          export CPPFLAGS=-I${HOME}/netcdf/include
          export LDFLAGS=-L${HOME}/netcdf/lib
          wget https://github.com/Unidata/netcdf-fortran/archive/v4.5.3.tar.gz &> /dev/null
          tar -xzf v4.5.3.tar.gz
          pushd netcdf-fortran-4.5.3
          ./configure --prefix=${HOME}/netcdf
          make -j2
          make install

#      # Install OpenMPI
#      - name: Install OpenMPI
#        run: sudo apt-get install openmpi-bin libopenmpi-dev -y
#
#      # Install NetCDF
#      - name: Install NetCDF
#        run: sudo apt-get install libnetcdf-dev -y
#
#      # Install NetCDF-Fortran
#      - name: Install NetCDF-Fortran
#        run: sudo apt-get install libnetcdff-dev -y
#

      # Get NetCDF versions
      - name: Get NetCDF version
        run: |
          export PATH="${HOME}/netcdf/bin:$PATH"
          nc-config --version
          nf-config --version

      # Test debug mode
      - name: Test Shallow Water Debug
        run: |
          cd build
          rm -rf *
          export CC=icc
          export FC=ifort
          cmake -DCMAKE_BUILD_TYPE=debug -DMPIEXEC_PREFLAGS=--oversubscribe -DCMAKE_PREFIX_PATH='~;~/netcdf' ..
          make
          ctest --output-on-failure

      # Test release mode
      - name: Test Shallow Water Release
        run: |
          cd build
          rm -rf *
          export CC=icc
          export FC=ifort
          cmake -DCMAKE_BUILD_TYPE=release -DMPIEXEC_PREFLAGS=--oversubscribe -DCMAKE_PREFIX_PATH='~;~/netcdf' ..
          make
          ctest --output-on-failure
